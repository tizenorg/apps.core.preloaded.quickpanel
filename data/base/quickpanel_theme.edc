/*                                                                                                                                                    
 * Copyright (c) 2000 - 2012 Samsung Electronics Co., Ltd. All Rights Reserved. 
 *                                                                                 
 * This file is part of quickpanel  
 *
 * Written by Jeonghoon Park <jh1979.park@samsung.com> Youngjoo Park <yjoo93.park@samsung.com>
 *                                                                                 
 * PROPRIETARY/CONFIDENTIAL                                                        
 *                                                                                 
 * This software is the confidential and proprietary information of                
 * SAMSUNG ELECTRONICS ("Confidential Information").                               
 * You shall not disclose such Confidential Information and shall use it only   
 * in accordance with the terms of the license agreement you entered into          
 * with SAMSUNG ELECTRONICS.                                                       
 * SAMSUNG make no representations or warranties about the suitability of          
 * the software, either express or implied, including but not limited to           
 * the implied warranties of merchantability, fitness for a particular purpose, 
 * or non-infringement. SAMSUNG shall not be liable for any damages suffered by 
 * licensee as a result of using, modifying or distributing this software or    
 * its derivatives.                                                                
 *                                                                                 
 */ 

#include "quickpanel_theme_def.h"

collections {
	group { name: "elm/genlist/item/qp_group_title/default";
		alias: "elm/genlist/item_odd/qp_group_title/default";
		data.item: "stacking" "above";
		data.item: "selectraise" "on";
		data.item: "labels" "elm.text.text";
		data.item: "icons" "elm.swallow.icon";
		data.item: "treesize" "20";

		parts {
			part { name: "rect";
				type: RECT;
				repeat_events: 1;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 80;
					color: QP_THEME_LIST_TITLE_BG_COLOR;
				}
			}

			part { name: "top_line";
				type: RECT;
				mouse_events: 0;
				description {
					state: "default" 0.0;
					min: 0 1;
					fixed: 0 1;
					color: QP_THEME_LIST_TITLE_SEPERATOR_COLOR;
					rel2 {
						relative: 1.0 0.0;
					}
				}
			}

			part { name: "elm.padding.left";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 20 0;
					fixed: 1 0;
					visible: 0;
					rel2.relative: 0.0 1.0;
					align: 0.0 0.5;
				}
			}
			part { name: "elm.padding.right";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 20 0;
					fixed: 1 0;
					visible: 0;
					rel1.relative: 1.0 0.0;
					align: 1.0 0.5;
				}
			}
			part { name: "elm.padding.top";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 0;
					fixed: 1 0;
					visible: 0;
					rel2.relative: 1.0 0.0;
					align: 0.5 0.0;
				}
			}
			part { name: "elm.padding.bottom";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 20;
					fixed: 1 1;
					visible: 0;
					rel1.relative: 0.0 1.0;
					align: 0.5 1.0;
				}
			}

			part { name: "elm.text.text";
				type: TEXT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 30;
					fixed: 0 1;
					align: 0.0 1.0;
					rel1 {
						to_x: "elm.padding.left";
						to_y: "elm.padding.bottom";
						relative: 1.0 0.0;
					}
					rel2 {
						to_x: "elm.swallow.icon";
						to_y: "elm.padding.bottom";
						relative: 0.0 0.0;
					}
					color: QP_THEME_LIST_TITLE_FONT_COLOR;
					text {
						font: QP_THEME_LIST_TITLE_FONT_NAME;
						size: QP_THEME_LIST_TITLE_FONT_SIZE;
						align: 0.0 1.0;
					}
				}
			}

			part { name: "elm.icon.padding.top";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 15;
					fixed: 0 1;
					rel2.relative: 1.0 0.0;
					align: 0.5 0.0;
					visible: 0;
				}
			}

			part { name: "elm.icon.padding.bottom";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 15;
					fixed: 0 1;
					rel1.relative: 0.0 1.0;
					align: 0.5 1.0;
					visible: 0;
				}
			}

			part { name: "elm.swallow.icon";
				type: SWALLOW;
				scale: 1;
				description { state: "default" 0.0;
					min: 180 50;
					fixed: 1 1;
					align: 1.0 0.5;
					rel1 {
						to_x: "elm.padding.right";
						to_y: "elm.icon.padding.top";
						relative: 0.0 1.0;
					}
					rel2 {
						to_x: "elm.padding.right";
						to_y: "elm.icon.padding.bottom";
						relative: 0.0 0.0;
					}
				}
			}
		}
	}

	group { name: "elm/genlist/item/notification_item/default";
		alias: "elm/genlist/item_odd/notification_item/default";

		data.item: "stacking" "above";
		data.item: "selectraise" "on";
		data.item: "labels" "elm.text.title elm.text.content elm.text.badge elm.text.time";
		data.item: "icons" "elm.swallow.icon elm.swallow.thumbnail elm.swallow.progress";
		data.item: "states" "elm.text.content elm.text.time";

		script {
			public ctnt_shown;
			public time_shown;
		}

		parts {
			part { name: "base";
				type: RECT;
				repeat_events: 1;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 125;
					color: QP_THEME_LIST_ITEM_BG_COLOR;
				}
			}

			part { name: "bg_image";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					color: QP_THEME_LIST_ITEM_BG_COLOR;
				}
				description {
					state: "selected" 0.0;
					inherit: "default" 0.0;
					color: QP_THEME_LIST_ITEM_BG_COLOR;
				}
			}

			part { name: "top_line";
				type: RECT;
				clip_to: "disclip";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					min: 0 1;
					fixed: 0 1;
					visible: 1;
					color: QP_THEME_LIST_ITEM_SEPERATOR_COLOR;
					rel2 {
						relative: 1.0 0.0;
					}
				}
			}

			part { name: "elm.padding.top";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 8;
					fixed: 0 1;
					visible: 0;
					rel2.relative: 1.0 0.0;
					align: 0.0 0.0;
				}
			}

			part { name: "elm.padding.bottom";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 8;
					fixed: 0 1;
					visible: 0;
					rel1.relative: 0.0 1.0;
					align: 0.0 1.0;
				}
			}

			part { name: "elm.padding.left";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 20 0;
					fixed: 1 0;
					visible: 0;
					rel2.relative: 0.0 1.0;
					align: 0.0 0.0;
				}
			}

			part { name: "elm.padding.right";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 20 0;
					fixed: 1 0;
					visible: 0;
					rel1.relative: 1.0 0.0;
					align: 1.0 0.0;
				}
			}

			part { name: "elm.rect.thumbnail";
				clip_to: "disclip";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 105 105;
					fixed: 1 1;
					rel1 {
						relative: 1.0 0.5;
						to_x: "elm.padding.left";
					}
					rel2 {
						relative: 1.0 0.5;
						to_x: "elm.padding.left";
					}
					align: 0.0 0.5;
					color: QP_THEME_LIST_ITEM_THUMBNAIL_COLOR;
				}
			}

			part { name: "elm.swallow.thumbnail";
				clip_to: "disclip";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					rel1 {
						to: "elm.rect.thumbnail";
					}
					rel2 {
						to: "elm.rect.thumbnail";
					}
					align: 0.5 0.5;
				}
			}

			part { name: "elm.swallow.icon";
				clip_to: "disclip";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 54 54;
					fixed: 1 1;
					rel1 {
						relative: 1.0 1.0;
						to: "elm.rect.thumbnail";
					}
					rel2 {
						relative: 1.0 1.0;
						to: "elm.rect.thumbnail";
					}
					align: 1.0 1.0;
				}
			}

			part { name: "elm.padding.icon.right";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 15 0;
					fixed: 1 0;
					visible: 0;
					rel1.to: "elm.rect.thumbnail";
					rel1.relative: 1.0 0.0;
					rel2.to: "elm.rect.thumbnail";
					align: 0.0 0.0;
				}
			}

			part { name: "elm.text.title";
				clip_to: "disclip";
				type: TEXT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 32;
					align: 0.0 0.0;
					fixed: 1 1;
					rel1 {
						relative: 1.0 1.0;
						to_x: "elm.padding.icon.right";
						to_y: "elm.padding.top";
					}
					rel2 {
						relative: 0.0 1.0;
						to_x: "elm.padding.right";
						to_y: "elm.padding.top";
					}
					color: QP_THEME_LIST_ITEM_MAIN_FONT_COLOR;
					text {
						font: QP_THEME_LIST_ITEM_MAIN_FONT_NAME;
						size: QP_THEME_LIST_ITEM_MAIN_FONT_SIZE;
						align: 0.0 0.5;
					}
				}
				description { state: "selected" 0.0;
					inherit: "default" 0.0;
					color: QP_THEME_LIST_ITEM_MAIN_FONT_COLOR;
				}
			}

			part { name: "elm.text.time";
				clip_to: "disclip";
				type: TEXT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					align: 1.0 1.0;
					fixed: 1 0;
					rel1 {
						relative: 0.0 0.0;
						to_x: "elm.padding.right";
						to_y: "elm.padding.bottom";
					}
					rel2 {
						relative: 0.0 0.0;
						to_x: "elm.padding.right";
						to_y: "elm.padding.bottom";
					}
					color: QP_THEME_LIST_ITEM_TIME_FONT_COLOR;
					text {
						font: QP_THEME_LIST_ITEM_TIME_FONT_NAME;
						size: QP_THEME_LIST_ITEM_TIME_FONT_SIZE;
						min: 1 0;
						align: 1.0 1.0;
					}
				}
				description { state: "selected" 0.0;
					inherit: "default" 0.0;
					color: QP_THEME_LIST_ITEM_TIME_FONT_COLOR;
				}
			}

			part { name: "elm.text.content";
				clip_to: "disclip";
				type: TEXT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					align: 0.0 0.0;
					min: 0 32;
					fixed: 0 1;
					rel1 {
						relative: 1.0 1.0;
						to_x: "elm.padding.icon.right";
						to_y: "elm.text.title";
					}
					rel2 {
						relative: 0.0 1.0;
						to_x: "elm.padding.right";
						to_y: "elm.text.title";
					}
					color: QP_THEME_LIST_ITEM_SUB_FONT_COLOR;
					text {
						font: QP_THEME_LIST_ITEM_SUB_FONT_NAME;
						size: QP_THEME_LIST_ITEM_SUB_FONT_SIZE;
						align: 0.0 0.5;
					}
				}
				description { state: "show" 0.0;
					inherit: "default" 0.0;
					min: 0 32;
				}
				description { state: "selected" 0.0;
					inherit: "default" 0.0;
					min: 0 32;
					color: QP_THEME_LIST_ITEM_SUB_FONT_COLOR;
				}
			}

			part { name: "elm.swallow.progress";
				clip_to: "disclip";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 5;
					fixed: 0 1;
					rel1 {
						relative: 1.0 1.0;
						to_x: "elm.padding.icon.right";
						to_y: "elm.text.content";
					}
					rel2 {
						relative: 0.0 1.0;
						to_x: "elm.padding.right";
						to_y: "elm.text.content";
					}
					align: 0.0 0.0;
				}
			}

			part { name: "disclip";
				type: RECT;
				description {
					state: "default" 0.0;
				}
				description {
					state: "disabled" 0.0;
					inherit: "default" 0.0;
					color: 255 255 255 64;
				}
			}
		}

		programs {
			program { name: "show_content";
				signal: "elm,state,elm.text.content,active";
				source: "elm";
				script {
					set_state(PART:"elm.text.content", "show", 0.0);
					set_int(ctnt_shown, 1);
				}
			}
			program { name: "go_active";
				signal: "elm,state,selected";
				source: "elm";
				script {
					set_state(PART:"bg_image", "selected", 0.0);
					set_state(PART:"elm.text.title", "selected", 0.0);
					set_state(PART:"elm.text.time", "selected", 0.0);
					if (get_int(ctnt_shown) == 1)
					set_state(PART:"elm.text.content", "selected", 0.0);
				}
			}
			program { name: "go_passive";
				signal: "elm,state,unselected";
				source: "elm";
				script {
					set_state(PART:"bg_image", "default", 0.0);
					set_state(PART:"elm.text.title", "default", 0.0);
					set_state(PART:"elm.text.time", "show", 0.0);
					if (get_int(ctnt_shown) == 1)
					set_state(PART:"elm.text.content", "show", 0.0);
				}
			}
			program { name: "go_disabled";
				signal: "elm,state,disabled";
				source: "elm";
				action: STATE_SET "disabled" 0.0;
				target: "disclip";
			}
			program { name: "go_enabled";
				signal: "elm,state,enabled";
				source: "elm";
				action: STATE_SET "default" 0.0;
				target: "disclip";
			}
		}
	}

///////////////////////////////////////////////////////////////////////////////////////

#define NOTI_BUTTON_STATE_ENABLED 0
#define NOTI_BUTTON_STATE_DISABLED 1

	group { name: "elm/button/base/noticlear";
		images {
			image: "RQ02_button_normal_left.png" COMP;
			image: "RQ02_button_normal_center.png" COMP;
			image: "RQ02_button_normal_right.png" COMP;
			image: "RQ02_button_press_left.png" COMP;
			image: "RQ02_button_press_center.png" COMP;
			image: "RQ02_button_press_right.png" COMP;
		}

		script {
			public button_state = NOTI_BUTTON_STATE_ENABLED;
		}
		parts {
			part { name: "button_image";
				type: IMAGE;
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					rel1 { to_x: "padding.left"; to_y: "elm.text"; }
					rel2 { to_x: "padding.right"; to_y: "elm.text"; }
					min: 180 50;
					image {
						normal: "RQ02_button_normal_center.png";
					}
				}
				description { state: "clicked" 0.0;
					inherit: "default" 0.0;
					image {
						normal: "RQ02_button_press_center.png";
					}
				}
				description { state: "disabled" 0.0;
					inherit: "default" 0.0;
				}
				description { state: "focused" 0.0;
					inherit: "default" 0.0;
				}
			}
		part { name: "padding.left";
			type: IMAGE;
			scale: 1;
			description { state: "default" 0.0;
				visible: 0;
				min: 2 50;
				fixed: 1 0;
				image {
						normal: "RQ02_button_normal_left.png";
				}
				rel1.relative: 0 0;
				rel2 { relative: 0.0 1.0; to_x: "elm.text"; }
				align: 1 0;
			}
		}
		part { name: "padding.right";
			type: IMAGE;
			scale: 1;
			description { state: "default" 0.0;
				visible: 0;
				min: 2 50;
				fixed: 1 0;
				image {
						normal: "RQ02_button_normal_right.png";
				}
				rel1 { relative: 1.0 0.0; to_x: "elm.text"; }
				rel2.relative: 1.0 1.0;
				align: 0 0;
			}
		}
		part {   name: "elm.text";
			type: TEXT;
			mouse_events: 0;
			scale: 1;
			description { state: "default" 0.0;
				visible: 0;
				fixed: 1 1;
				align: 0.5 0.5;
				color: 249 249 249 255;
				text {
					font: "SLP:style=Medium";
					size: 26;
					min: 1 1;
					align: 0.5 0.5;
				}
			}
			description { state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				min: 1 1;
			}
			description { state: "clicked" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				min: 1 1;
				//color: BUTTON_CONTACT_BUTTON_TEXT_PRESSED_COLOR_INC;
			}
			description { state: "disabled" 0.0;
				inherit: "default" 0.0;
				color: 0 0 0 128;
			}
			description { state: "disabled_visible" 0.0;
				inherit: "default" 0.0;
				//color: BUTTON_CONTACT_BUTTON_TEXT_DISABLED_COLOR_INC;
				visible: 1;
				min: 1 1;
			}
			description { state: "focused" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				min: 1 1;
				//color: BUTTON_CONTACT_BUTTON_TEXT_FOCUSED_COLOR_INC;
			}
		}
		part { name: "over1";
			mouse_events: 0;
			description { state: "default" 0.0;
				rel2.relative: 1.0 0.5;
			}
		}
		part { name: "over2";
			mouse_events: 1;
			repeat_events: 1;
			ignore_flags: ON_HOLD;
			description { state: "default" 0.0;
				rel1.to: "button_image";
				rel2.to: "button_image";
			}
		}
		part { name: "over3";
			mouse_events: 1;
			repeat_events: 1;
			description { state: "default" 0.0;
				rel1.to: "button_image";
				rel2.to: "button_image";
				color: 0 0 0 0;
			}
		}
		part { name: "disabler";
			type: RECT;
			description { state: "default" 0.0;
				rel1.to: "button_image";
				rel2.to: "button_image";
				color: 0 0 0 0;
				visible: 0;
			}
			description { state: "disabled" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}
	}
	programs {
		program { name: "button_click";
			signal: "mouse,down,1";
			source: "over2";
			action: SIGNAL_EMIT "elm,action,press" "";
			after: "button_click_anim";
		}
		program { name: "button_click_anim";
			action: STATE_SET "clicked" 0.0;
			target: "button_image";
			target: "elm.text";
		}
		program { name: "button_unpress";
			action: SIGNAL_EMIT "elm,action,unpress" "";
		}
		program { name: "button_mouseout_clicked";
			signal: "mouse,up,1";
			source: "over3";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.text", st, 30, vl);
				if (!strcmp(st, "clicked") || !strcmp(st, "focused"))
				{
					emit("elm,action,default,text,set", "");
					set_state(PART:"elm.text", "visible", 0.0);
				}
				if(get_int(button_state) != NOTI_BUTTON_STATE_DISABLED)
					set_state(PART:"button_image", "default", 0.0);
			}
			after: button_unpress;
		}
		program { name: "button_unclick3";
			signal: "mouse,clicked,1";
			source: "over2";
			action: SIGNAL_EMIT "elm,action,click" "";
		}
		program { name: "text_show";
			signal: "elm,state,text,visible";
			source: "elm";
			script {
				if(get_int(button_state) != NOTI_BUTTON_STATE_DISABLED)
					set_state(PART:"elm.text", "visible", 0.0);
				else
					set_state(PART:"elm.text", "disabled_visible", 0.0);
			}
		}
		program { name: "text_hide";
			signal: "elm,state,text,hidden";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "elm.text";
		}

		program { name: "disable";
			signal: "elm,state,disabled";
			source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "button_image";
			target: "disabler";
			after: "disable_text";
		}
		program { name: "disable_text";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.text", st, 30, vl);
				if (!strcmp(st, "visible"))
					set_state(PART:"elm.text", "disabled_visible", 0.0);
				else
					set_state(PART:"elm.text", "disabled", 0.0);
				set_int(button_state, NOTI_BUTTON_STATE_DISABLED);
			}
		}
		program { name: "enable";
			signal: "elm,state,enabled";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "button_image";
			target: "disabler";
			after: "enable_text";
		}
		program { name: "enable_text";
			script {
				new st[31];
				new Float:vl;
				get_state(PART:"elm.text", st, 30, vl);
				if (!strcmp(st, "disabled_visible"))
					set_state(PART:"elm.text", "visible", 0.0);
				else
					set_state(PART:"elm.text", "default", 0.0);
				set_int(button_state, NOTI_BUTTON_STATE_ENABLED);
			}
		}
		program { name: "focused";
			//signal: "elm,action,focus";
			//source: "elm";
			action: STATE_SET "focused" 0.0;
			target: "button_image";
			target: "elm.text";
		}
		program { name: "unfocused";
			//signal: "elm,action,unfocus";
			//source: "elm";
			action: STATE_SET "default" 0.0;
			target: "button_image";
			action: STATE_SET "visible" 0.0;
			target: "elm.text";
		}
	}
}

