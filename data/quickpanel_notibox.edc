/*
 * Copyright (c) 2009-2015 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


//#define DEBUG
//#define DEBUG_TEXT

#define MAKE_PART_SHOW_PROGRAM(PARTNAME)\
		program{\
			name: PARTNAME".object.show";\
			signal: "object.show";\
			source: PARTNAME;\
			action: STATE_SET "show" 0.0;\
			target: PARTNAME;\
		}\

#define MAKE_PART_SHOW_TEXT_PROGRAM(PARTNAME)\
		program{\
			name: PARTNAME".text.show";\
			signal: "object.show";\
			source: PARTNAME;\
			action: STATE_SET "show" 0.0;\
			target: PARTNAME;\
		}\
		program{\
			name: PARTNAME".text.show.efect";\
			signal: "object.show.effect";\
			source: PARTNAME;\
			action: STATE_SET "show.effect" 0.0;\
			target: PARTNAME;\
		}\

images {
	image: "quick_image_dimmed_port.png" COMP;
	image: "quick_image_dimmed_land.png" COMP;
	image: "icon_press.png" COMP;
}

#define NOTIBOX_FONT_SHADOW_COLOR 0 0 0 191
#define NOTIBOX_FONT_OUTLINE_COLOR 0 0 0 191
#define NOTIBOX_FONT_NO_SHADOW_COLOR 0 0 0 0
#define NOTIBOX_FONT_NO_OUTLINE_COLOR 0 0 0 0

#define NOTIBOX_CONTENTS_FONT "Tizen:style=Bold"
#define NOTIBOX_CONTENTS_FONT_SIZE 20
#define NOTIBOX_CONTENTS_FONT_COLOR 248 246 239 255

#define NOTIBOX_INFO_FONT "Tizen:style=Bold"
#define NOTIBOX_INFO_FONT_SIZE 18
#define NOTIBOX_INFO_FONT_COLOR 180 180 180 255

#define NOTIBOX_INFO_SHORT_FONT "Tizen:style=Bold"
#define NOTIBOX_INFO_SHORT_FONT_SIZE 18
#define NOTIBOX_INFO_SHORT_FONT_COLOR 180 180 180 255

#define NOTIBOX_INFO_SUB_FONT "Tizen:style=Regular"
#define NOTIBOX_INFO_SUB_FONT_SIZE 16
#define NOTIBOX_INFO_SUB_FONT_COLOR 180 180 180 255

#define TEXT_CLASS_TIZEN "tizen"
#define TEXT_EFFECT "OUTLINE_SHADOW"

styles {
	style {
		name: "notibox_title";
		base: "font=Tizen:style=Regular text_class=tizen font_size=22 color=#F8F6EF ellipsis=1.0 linegap=-6 wrap=mixed";
	}

	style {
		name: "notibox_title_effect";
		base: "font=Tizen:style=Regular text_class=tizen font_size=22 color=#F8F6EF ellipsis=1.0 linegap=-6 wrap=mixed style=outline_shadow outline_color=#000000BF shadow_color=#000000BF";
	}

	style {
		name: "notibox_contents";
		base: "font=Tizen:style=Bold text_class=tizen font_size=20 color=#F8F6EF ellipsis=1.0 linegap=-6 wrap=mixed";
	}

	style {
		name: "notibox_contents_effect";
		base: "font=Tizen:style=Bold text_class=tizen font_size=20 color=#F8F6EF ellipsis=1.0 linegap=-6 wrap=mixed style=outline_shadow outline_color=#000000BF shadow_color=#000000BF";
	}

	style {
		name: "notibox_info";
		base: "font=Tizen:style=Bold text_class=tizen font_size=18 color=#BFBFBFFF ellipsis=1.0 linegap=-6 wrap=mixed";
	}

	style {
		name: "notibox_info_effect";
		base: "font=Tizen:style=Bold text_class=tizen font_size=18 color=#BFBFBFFF ellipsis=1.0 linegap=-6 wrap=mixed style=outline_shadow outline_color=#000000BF shadow_color=#000000BF";
	}

	style {
		name: "notibox_info_short";
		base: "font=Tizen:style=Bold text_class=tizen font_size=18 color=#BFBFBFFF ellipsis=1.0 linegap=-6 wrap=mixed";
	}

	style {
		name: "notibox_info_short_effect";
		base: "font=Tizen:style=Regular text_class=tizen font_size=18 color=#BFBFBFFF ellipsis=1.0 linegap=-6 wrap=mixed style=outline_shadow outline_color=#000000BF shadow_color=#000000BF";
	}

	style {
		name: "notibox_info_sub";
		base: "font=Tizen:style=Regular text_class=tizen font_size=12 color=#BFBFBFFF ellipsis=1.0 linegap=-6 wrap=mixed";
	}

	style {
		name: "notibox_info_sub_effect";
		base: "font=Tizen:style=Regular text_class=tizen font_size=12 color=#BFBFBFFF ellipsis=1.0 linegap=-6 wrap=mixed style=outline_shadow outline_color=#000000BF shadow_color=#000000BF";
	}
}

group {
	name: "quickpanel/notibox/single_multi";

	script {
		public g_is_show_dim_bg;

		public init_variables() {
			set_int(g_is_show_dim_bg, 0);
		}
	}

	parts {
		part{
			name: "clip.background";
			type:RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				visible:1;
			}
		}
		part {
			name: "background";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				align: 0.0 0.0;
				color_class: BOX_COLOR_BG;
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
			}
		}

		//section layout for margin

		part {
			name: "margin.left";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_MARGIN_L_TEXT_H 0;
				fixed: 1 0;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 0.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.right";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_MARGIN_R_TEXT_H 0;
				fixed: 1 0;
				rel1 {
					relative: 1.0 0.0;
				}
				rel2 {
					relative: 1.0 1.0;
				}
				align: 1.0 0.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.left.icon";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 10 0;
				fixed: 1 0;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 0.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 255 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.top.icon";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 10;
				fixed: 0 1;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 1.0 0.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 255 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.top.text";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 10;
				fixed: 0 1;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 1.0 0.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.bottom";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 8;
				fixed: 0 1;
				rel1 {
					relative: 0.0 1.0;
				}
				rel2 {
					relative: 1.0 1.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.bottom.thin";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 2;
				fixed: 0 1;
				rel1 {
					relative: 0.0 1.0;
				}
				rel2 {
					relative: 1.0 1.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}

		//section layout for elements
		//section layout for icon
		part {
			name: "rect.icon.bg";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left.icon";
					to_y:"margin.top.icon";
					relative: 1.0 1.0;
				}
				rel2 {
					to_x:"margin.left.icon";
					to_y:"margin.top.icon";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.icon";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				rel1 {
					to:"rect.icon.bg";
					relative: 0.5 0.5;
				}
				rel2 {
					to:"rect.icon.bg";
					relative: 0.5 0.5;
				}
				align: 0.5 0.5;
#ifdef DEBUG
				color: 205 205 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.icon.sub.padding";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 10;
				fixed: 0 1;
				rel1 {
					to:"rect.icon.bg";
					relative: 0.0 1.0;
				}
				rel2 {
					to:"rect.icon.bg";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 235 215 235 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.icon.sub";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				max: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				fixed: 1 1;
				rel1 {
					to:"rect.icon.sub.padding";
					relative: 1.0 1.0;
				}
				rel2 {
					to:"rect.icon.sub.padding";
					relative: 1.0 1.0;
				}
				align: 1.0 1.0;
#ifdef DEBUG
				color: 255 0 100 255;
#else
				visible:0;
#endif
			}
		}

		//section layout for texts
		part {
			name: "rect.text.title";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 125 81;
				max: 9999 81;
				fixed: 1 1;
				rel1 {
					to_x:"rect.icon.bg";
					to_y:"rect.icon.bg";
					relative: 1.0 0.5;
					offset: +6 0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.icon";
					relative: 0.0 0.5;
				}
				align: 0.0 0.5;
#ifdef DEBUG
				color: 100 100 100 255;
#else
				visible:0;
#endif
			}
			description {
				state: "without_icon" 0.0;
				min: 125 81;
				max: 9999 81;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.icon.bg";
					relative: 1.0 0.5;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.icon.bg";
					relative: 0.0 0.5;
				}
				align: 0.0 0.5;
#ifdef DEBUG
				color: 100 100 100 255;
#else
				visible:0;
#endif
			}
		}

		part {
			name: "rect.text.info.2";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_INFO_HEIGHT;
				fixed: 0 1;
				rel1 {
					to_x:"margin.left";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"margin.bottom";
					relative: 0.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 100 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.sub.2";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_INFO_HEIGHT;
				max: 0 BOX_TEXT_INFO_HEIGHT;
				fixed: 1 1;
				rel1 {
					to_x:"margin.right";
					to_y:"margin.bottom";
					relative: 0.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"margin.bottom";
					relative: 0.0 0.0;
				}
				align: 1.0 1.0;
#ifdef DEBUG
				color: 76 76 76 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.2.short";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.info.2";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"object.text.info.sub.2";
					to_y:"rect.text.info.2";
					relative: 0.0 1.0;
					offset: BOX_TEXT_SUB_PADDING_WIDTH 0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 102 103 104 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.1";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_INFO_HEIGHT;
				fixed: 0 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.info.2";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.text.info.2";
					relative: 0.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 150 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.1.multiline";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.info.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"margin.bottom.thin";
					relative: 0.0 0.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 255 150 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.sub.1";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_INFO_HEIGHT;
				max: 0 BOX_TEXT_INFO_HEIGHT;
				fixed: 1 1;
				rel1 {
					to_x:"margin.right";
					to_y:"rect.text.info.2";
					relative: 0.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.text.info.2";
					relative: 0.0 0.0;
				}
				align: 1.0 1.0;
#ifdef DEBUG
				color: 76 76 76 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.1.short";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.info.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"object.text.info.sub.1";
					to_y:"rect.text.info.1";
					relative: 0.0 1.0;
					offset: BOX_TEXT_SUB_PADDING_WIDTH 0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 102 103 104 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.contents";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_CONTENTS_HEIGHT;
				fixed: 0 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.info.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"object.text.count";
					to_y:"rect.text.info.1";
					relative: 0.0 0.0;
					offset: -8 0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 150 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.contents.multiline.short";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.contents";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.text.info.2";
					relative: 0.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 150 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.contents.multiline";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.text.contents";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"margin.bottom.thin";
					relative: 0.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 150 100 255;
#else
				visible:0;
#endif
			}
		}
		//section objects
		part{
			name: "object.icon.background";
			type:SWALLOW;
			scale: 1;
			clip_to: "clip.background";
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.touch.effect";
			type:RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				color: 0 0 0 0;
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				color_class: BOX_COLOR_BG_HIGHLIGHT;
				visible:1;
			}
			description {
				state: "show.dim" 0.0;
				inherit: "default" 0.0;
				color_class: BOX_COLOR_BG_HIGHLIGHT_DIM;
				visible:1;
			}
		}
		part{
			name: "object.icon.bg.dim";
			type:IMAGE;
			scale:1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				image {
					normal:"quick_image_dimmed_port.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:0;
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
				image {
					normal:"quick_image_dimmed_port.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:1;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				image {
					normal:"quick_image_dimmed_land.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:1;
			}
		}
		part{
			name: BOX_PART_ICON;
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				rel1 {to: "rect.icon";}
				rel2 {to: "rect.icon";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.icon.press";
			type:IMAGE;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				rel1 {to: "rect.icon.bg";}
				rel2 {to: "rect.icon.bg";}
				image {
					normal:"icon_press.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "hide" 0.0;
				inherit: "default" 0.0;
				visible:0;
			}
		}
		part{
			name: BOX_PART_ICON_SUB;
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				max: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				rel1 {to: "rect.icon.sub";}
				rel2 {to: "rect.icon.sub";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}

		part {
			name: "object.text.title";
			scale: 1;
			type: TEXTBLOCK;
			multiline: 1;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.title";}
				rel2 {to: "rect.text.title";}
				text {
					style: "notibox_title";
					size: 34;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				text {
					style: "notibox_title_effect";
				}
				visible:1;
			}
		}

		part {
			name: "object.text.contents";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.contents";}
				rel2 {to: "rect.text.contents";}
				color: NOTIBOX_CONTENTS_FONT_COLOR;
				text {
					font: NOTIBOX_CONTENTS_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_CONTENTS_FONT_SIZE;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.contents.multiline.short";
			scale: 1;
			type: TEXTBLOCK;
			multiline: 1;
			description {
				state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					to: "rect.text.contents.multiline.short";
				}
				rel2 {
					to: "rect.text.contents.multiline.short";
				}
				text {
						style: "notibox_contents";
						align: 0.0 0.0;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				text {
					style: "notibox_contents_effect";
				}
				visible:1;
			}
		}
		part {
			name: "object.text.contents.multiline";
			scale: 1;
			type: TEXTBLOCK;
			multiline: 1;
			description {
				state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					to: "rect.text.contents.multiline";
				}
				rel2 {
					to: "rect.text.contents.multiline";
				}
				text {
						style: "notibox_contents";
						align: 0.0 0.0;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				text {
					style: "notibox_contents_effect";
				}
				visible:1;
			}
		}
		part {
			name: "object.text.count";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_CONTENTS_HEIGHT;
				max: 79 BOX_TEXT_CONTENTS_HEIGHT;
				rel1 {
					to_x:"margin.right";
					to_y:"rect.text.info.1";
					relative: 0.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.text.info.1";
					relative: 0.0 0.0;
				}
				color: NOTIBOX_CONTENTS_FONT_COLOR;
				text {
					font: NOTIBOX_CONTENTS_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_CONTENTS_FONT_SIZE;
					align: 1.0 0.5;
					min: 1 0;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
				align: 1.0 1.0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.info.1";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.info.1";}
				rel2 {to: "rect.text.info.1";}
				color: NOTIBOX_INFO_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_FONT_SIZE;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.info.1.short";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.info.1.short";}
				rel2 {to: "rect.text.info.1.short";}
				color: NOTIBOX_INFO_SHORT_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_SHORT_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_SHORT_FONT_SIZE;
					align: 0.0 0.5;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.info.1.multiline";
			scale: 1;
			type: TEXTBLOCK;
			multiline: 1;
			description {
				state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					to: "rect.text.info.1.multiline";
				}
				rel2 {
					to: "rect.text.info.1.multiline";
				}
				text {
						style: "notibox_info";
						align: 0.0 0.0;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				text {
					style: "notibox_info_effect";
				}
				visible:1;
			}
		}
		part {
			name: "object.text.info.sub.1";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {
					to: "rect.text.info.sub.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to: "rect.text.info.sub.1";
					relative: 1.0 1.0;
				}
				color: NOTIBOX_INFO_SUB_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_SUB_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_SUB_FONT_SIZE;
					align: 1.0 0.5;
					min: 1 0;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
				align:1.0 0.0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}

		part {
			name: "object.text.info.2";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.info.2";}
				rel2 {to: "rect.text.info.2";}
				color: NOTIBOX_INFO_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_FONT_SIZE;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.info.2.short";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.info.2.short";}
				rel2 {to: "rect.text.info.2.short";}
				color: NOTIBOX_INFO_SHORT_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_SHORT_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_SHORT_FONT_SIZE;
					align: 0.0 0.5;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.info.sub.2";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {
					to: "rect.text.info.sub.2";
					relative: 1.0 0.0;
				}
				rel2 {
					to: "rect.text.info.sub.2";
					relative: 1.0 1.0;
				}
				color: NOTIBOX_INFO_SUB_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_SUB_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_SUB_FONT_SIZE;
					align: 1.0 0.5;
					min: 1 0;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
				align:1.0 0.0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.layer.touch.background";
			mouse_events: 1;
			repeat_events: 1;
			scale: 1;
			type: RECT;
			description {
				state: "default" 0.0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				color: 0 0 0 0;
			}
		}
		QUICKPANEL_FOCUS_OBJECT("focus", "background", "background")
		part {
			name: "object.layer.touch.button.1";
			mouse_events: 1;
			repeat_events: 0;
			scale: 1;
			type: RECT;
			description {
				state: "default" 0.0;
				rel1 {
					to: "rect.icon";
				}
				rel2 {to: "rect.icon";}
				color: 0 0 0 0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "hide" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
	}

	programs {
		program {
			name: "init.layout";
			signal: "load";
			source: "";
			in: 0.0 0.0;
			script{
				init_variables();
			}
		}
		program{
			name: "box.show.dim";
			signal: "box.show.dim";
			source: "box.prog";
			script {
				set_int(g_is_show_dim_bg, 1);
			}
		}
		program{
			name: "box.hide.dim";
			signal: "box.hide.dim";
			source: "box.prog";
			script {
				set_int(g_is_show_dim_bg, 0);
			}
		}
		program{
			name: "box.portrait";
			signal: "box.portrait";
			source: "box.prog";
			action: STATE_SET "portrait" 0.0;
			target: "background";
			after: "box.portrait.custom";
		}
		program{
			name: "box.landscape";
			signal: "box.landscape";
			source: "box.prog";
			action: STATE_SET "landscape" 0.0;
			target: "background";
			after: "box.landscape.custom";
		}
		program{
			name: "box.portrait.custom";
			source: "box.prog";
			script {
				if (get_int(g_is_show_dim_bg) == 1) {
					set_state(PART:"object.icon.bg.dim", "portrait", 0.0);
				}
			}
		}
		program{
			name: "box.landscape.custom";
			source: "box.prog";
			script {
				if (get_int(g_is_show_dim_bg) == 1) {
					set_state(PART:"object.icon.bg.dim", "landscape", 0.0);
				}
			}
		}
#ifdef TBD
		program{
			name: "box.touch.down";
			signal: "mouse,clicked,1";
			source: "object.layer.touch.background";
			action: SIGNAL_EMIT "selected" "edje";
		}
#endif
		program{
			name: "effect,mouse,down";
			signal: "mouse,down,1";
			source: "object.layer.touch.background";
			script {
				if (get_int(g_is_show_dim_bg) == 1) {
					set_state(PART:"object.touch.effect", "show.dim", 0.0);
				} else {
					set_state(PART:"object.touch.effect", "show", 0.0);
				}
			}
		}
		program{
			name: "effect,mouse,up";
			signal: "mouse,up,1";
			source: "object.layer.touch.background";
			action: STATE_SET "default" 0.0;
			transition: ACCELERATE 0.20;
			target: "object.touch.effect";
		}
		program{
			name: "box.button.1.touch.clicked";
			signal: "mouse,clicked,1";
			source: "object.layer.touch.button.1";
			action: SIGNAL_EMIT "button_1" "edje";
		}
		program{
			name: "box.button.1.touch.down";
			signal: "mouse,down,1";
			source: "object.layer.touch.button.1";
			action: STATE_SET "show" 0.0;
			target: "object.icon.press";
		}
		program{
			name: "box.button.1.touch.up";
			signal: "mouse,up,1";
			source: "object.layer.touch.button.1";
			action: STATE_SET "hide" 0.0;
			target: "object.icon.press";
		}
		program{
			name: "box.show.icon.bg";
			signal: "box.show.icon.bg";
			source: "box.prog";
			action: STATE_SET "show" 0.0;
			target: "object.layer.touch.button.1";
		}
		program{
			name: "box.hide.icon.bg";
			signal: "box.hide.icon.bg";
			source: "box.prog";
			action: STATE_SET "hide" 0.0;
			target: "object.layer.touch.button.1";
		}
		program{
			name: "box.title.with.icon";
			signal: "box.title.with.icon";
			source: "box.prog";
			action: STATE_SET "default" 0.0;
			target: "rect.text.title";
		}
		program{
			name: "box.title.without.icon";
			signal: "box.title.without.icon";
			source: "box.prog";
			action: STATE_SET "without_icon" 0.0;
			target: "rect.text.title";
		}
		MAKE_PART_SHOW_PROGRAM("object.icon.background")
		MAKE_PART_SHOW_PROGRAM("object.icon")
		MAKE_PART_SHOW_PROGRAM("object.icon.sub")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.title")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.contents")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.contents.multiline.short")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.contents.multiline")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.count")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.1")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.1.short")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.1.multiline")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.sub.1")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.2")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.2.short")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.sub.2")
	}
}


group {
	name: "quickpanel/notibox/thumbnail";

	script {
		public g_is_show_dim_bg;

		public init_variables() {
			set_int(g_is_show_dim_bg, 0);
		}
	}

	parts {
		part{
			name: "clip.background";
			type:RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				visible:1;
			}
		}
		part {
			name: "background";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				color_class: BOX_COLOR_BG;
				align: 0.0 0.0;
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
			}
		}

		//section layout for margin

		part {
			name: "margin.left";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_MARGIN_L_TEXT_H 0;
				fixed: 1 0;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 0.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.right";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_MARGIN_R_TEXT_H 0;
				fixed: 1 0;
				rel1 {
					relative: 1.0 0.0;
				}
				rel2 {
					relative: 1.0 1.0;
				}
				align: 1.0 0.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.left.icon";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 10 0;
				fixed: 1 0;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 0.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 255 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.top.icon";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 10;
				fixed: 0 1;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 1.0 0.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 255 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.top.text";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 10;
				fixed: 0 1;
				rel1 {
					relative: 0.0 0.0;
				}
				rel2 {
					relative: 1.0 0.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.bottom";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 8;
				fixed: 0 1;
				rel1 {
					relative: 0.0 1.0;
				}
				rel2 {
					relative: 1.0 1.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "margin.bottom.thin";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 2;
				fixed: 0 1;
				rel1 {
					relative: 0.0 1.0;
				}
				rel2 {
					relative: 1.0 1.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 0 0 255 255;
#else
				visible:0;
#endif
			}
		}

		//section layout for elements
		//section layout for icon
		part {
			name: "rect.icon.bg";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left.icon";
					to_y:"margin.top.icon";
					relative: 1.0 1.0;
				}
				rel2 {
					to_x:"margin.left.icon";
					to_y:"margin.top.icon";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.icon";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				rel1 {
					to:"rect.icon.bg";
					relative: 0.5 0.5;
				}
				rel2 {
					to:"rect.icon.bg";
					relative: 0.5 0.5;
				}
				align: 0.5 0.5;
#ifdef DEBUG
				color: 205 205 255 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.icon.sub.padding";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 9;
				fixed: 0 1;
				rel1 {
					to:"rect.icon.bg";
					relative: 0.0 1.0;
				}
				rel2 {
					to:"rect.icon.bg";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 235 215 235 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.icon.sub";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				max: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				fixed: 1 1;
				rel1 {
					to:"rect.icon.sub.padding";
					relative: 1.0 1.0;
				}
				rel2 {
					to:"rect.icon.sub.padding";
					relative: 1.0 1.0;
				}
				align: 1.0 1.0;
#ifdef DEBUG
				color: 255 0 100 255;
#else
				visible:0;
#endif
			}
		}

		//section layout for texts
		part {
			name: "rect.text.title";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 125 81;
				max: 9999 81;
				fixed: 1 1;
				rel1 {
					to_x:"rect.icon.bg";
					to_y:"rect.icon.bg";
					relative: 1.0 0.5;
					offset: +10 0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.icon.bg";
					relative: 0.0 0.5;
				}
				align: 0.0 0.5;
#ifdef DEBUG
				color: 100 100 100 255;
#else
				visible:0;
#endif
			}
			description {
				state: "without_icon" 0.0;
				min: 125 81;
				max: 9999 81;
				fixed: 1 1;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.icon.bg";
					relative: 1.0 0.5;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.icon.bg";
					relative: 0.0 0.5;
				}
				align: 0.0 0.5;
#ifdef DEBUG
				color: 100 100 100 255;
#else
				visible:0;
#endif
			}
		}

		part {
			name: "rect.text.info.2";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_INFO_HEIGHT;
				fixed: 0 1;
				rel1 {
					to_x:"rect.thumbnail.list.1.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"margin.bottom";
					relative: 0.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 100 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.1";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_INFO_HEIGHT;
				fixed: 0 1;
				rel1 {
					to_x:"rect.thumbnail.list.1.padding";
					to_y:"rect.text.info.2";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.text.info.2";
					relative: 0.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 150 100 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.text.info.1.multiline";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1 {
					to_x:"rect.thumbnail.list.1.padding";
					to_y:"rect.text.info.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"margin.bottom.thin";
					relative: 0.0 0.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 255 150 100 255;
#else
				visible:0;
#endif
			}
		}

		part {
			name: "rect.text.contents";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_CONTENTS_HEIGHT;
				rel1 {
					to_x:"margin.left";
					to_y:"rect.thumbnail.list.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"object.text.count";
					to_y:"rect.thumbnail.list.1";
					relative: 0.0 0.0;
					offset: -8 0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 100 150 100 255;
#else
				visible:0;
#endif
			}
		}
		//section layout for thumbnail
		part {
			name: "rect.thumbnail.list.1";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 50 50;
				rel1 {
					to_x:"margin.left.icon";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"margin.left.icon";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.thumbnail.list.1.padding";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 3 0;
				rel1 {
					to:"rect.thumbnail.list.1";
					relative: 1.0 0.0;
				}
				rel2 {
					to:"rect.thumbnail.list.1";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 0 255;
#else
				visible:0;
#endif
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				min: 0 0;
			}
		}
		part {
			name: "rect.thumbnail.list.2";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 50 50;
				rel1 {
					to_x:"rect.thumbnail.list.1.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"rect.thumbnail.list.1.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.thumbnail.list.2.padding";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 2 0;
				rel1 {
					to:"rect.thumbnail.list.2";
					relative: 1.0 0.0;
				}
				rel2 {
					to:"rect.thumbnail.list.2";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 0 255;
#else
				visible:0;
#endif
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				min: 0 0;
			}
		}
		part {
			name: "rect.thumbnail.list.3";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 50 50;
				rel1 {
					to_x:"rect.thumbnail.list.2.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"rect.thumbnail.list.2.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.thumbnail.list.3.padding";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 2 0;
				rel1 {
					to:"rect.thumbnail.list.3";
					relative: 1.0 0.0;
				}
				rel2 {
					to:"rect.thumbnail.list.3";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 0 255;
#else
				visible:0;
#endif
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				min: 0 0;
			}
		}
		part {
			name: "rect.thumbnail.list.4";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 50 50;
				rel1 {
					to_x:"rect.thumbnail.list.3.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"rect.thumbnail.list.3.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif
			}
		}
		part {
			name: "rect.thumbnail.list.4.padding";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 2 0;
				rel1 {
					to:"rect.thumbnail.list.4";
					relative: 1.0 0.0;
				}
				rel2 {
					to:"rect.thumbnail.list.4";
					relative: 1.0 1.0;
				}
				align: 0.0 0.0;
#ifdef DEBUG
				color: 0 0 0 255;
#else
				visible:0;
#endif
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				min: 0 0;
			}
		}
		part {
			name: "rect.thumbnail.list.5";
			type: RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				min: 50 50;
				rel1 {
					to_x:"rect.thumbnail.list.4.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				rel2 {
					to_x:"rect.thumbnail.list.4.padding";
					to_y:"margin.bottom";
					relative: 1.0 0.0;
				}
				align: 0.0 1.0;
#ifdef DEBUG
				color: 255 0 0 255;
#else
				visible:0;
#endif

			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
			}
		}

		part{
			name: "object.icon.background";
			type:SWALLOW;
			scale: 1;
			clip_to: "clip.background";
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.touch.effect";
			type:RECT;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				color: 0 0 0 0;
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				color_class: BOX_COLOR_BG_HIGHLIGHT;
				visible:1;
			}
			description {
				state: "show.dim" 0.0;
				inherit: "default" 0.0;
				color_class: BOX_COLOR_BG_HIGHLIGHT_DIM;
				visible:1;
			}
		}
		part{
			name: "object.icon.bg.dim";
			type:IMAGE;
			scale:1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				image {
					normal:"quick_image_dimmed_port.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:0;
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
				image {
					normal:"quick_image_dimmed_port.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:1;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				image {
					normal:"quick_image_dimmed_land.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:1;
			}
		}
		part{
			name: BOX_PART_ICON;
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				rel1 {to: "rect.icon";}
				rel2 {to: "rect.icon";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.icon.press";
			type:IMAGE;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				max: BOX_ICON_BG_SIZE_W BOX_ICON_BG_SIZE_H;
				rel1 {to: "rect.icon.bg";}
				rel2 {to: "rect.icon.bg";}
				image {
					normal:"icon_press.png";
					border: 0 0 0 0;
					border_scale: 1;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "hide" 0.0;
				inherit: "default" 0.0;
				visible:0;
			}
		}
		part{
			name: BOX_PART_ICON_SUB;
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 1 1;
				min: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				max: BOX_ICON_SUB_SIZE_W BOX_ICON_SUB_SIZE_H;
				rel1 {to: "rect.icon.sub";}
				rel2 {to: "rect.icon.sub";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}

		//section thumbnail
		part{
			name: "object.thumbnail.list.1";
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "rect.thumbnail.list.1";}
				rel2 {to: "rect.thumbnail.list.1";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.thumbnail.list.2";
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "rect.thumbnail.list.2";}
				rel2 {to: "rect.thumbnail.list.2";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.thumbnail.list.3";
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "rect.thumbnail.list.3";}
				rel2 {to: "rect.thumbnail.list.3";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.thumbnail.list.4";
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "rect.thumbnail.list.4";}
				rel2 {to: "rect.thumbnail.list.4";}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
		}
		part{
			name: "object.thumbnail.list.5";
			type:SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
				fixed: 0 0;
				rel1 {to: "rect.thumbnail.list.5";}
				rel2 {to: "rect.thumbnail.list.5";}
				visible: 0;
			}
			description {
				state: "portrait" 0.0;
				inherit: "default" 0.0;
			}
			description {
				state: "landscape" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "object.text.title";
			scale: 1;
			type: TEXTBLOCK;
			multiline: 1;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.title";}
				rel2 {to: "rect.text.title";}
				text {
					style: "notibox_title";
					size: 34;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				text {
					style: "notibox_title_effect";
				}
				visible:1;
			}
		}

		part {
			name: "object.text.contents";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.contents";}
				rel2 {to: "rect.text.contents";}
				color: NOTIBOX_CONTENTS_FONT_COLOR;
				text {
					font: NOTIBOX_CONTENTS_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_CONTENTS_FONT_SIZE;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.count";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				min: 0 BOX_TEXT_CONTENTS_HEIGHT;
				max: 790 BOX_TEXT_CONTENTS_HEIGHT;
				rel1 {
					to_x:"margin.right";
					to_y:"rect.thumbnail.list.1";
					relative: 0.0 0.0;
				}
				rel2 {
					to_x:"margin.right";
					to_y:"rect.thumbnail.list.1";
					relative: 0.0 0.0;
				}
				color: NOTIBOX_CONTENTS_FONT_COLOR;
				text {
					font: NOTIBOX_CONTENTS_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_CONTENTS_FONT_SIZE;
					align: 1.0 0.5;
					min: 1 0;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
				align: 1.0 1.0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}
		part {
			name: "object.text.info.1";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.info.1";}
				rel2 {to: "rect.text.info.1";}
				color: NOTIBOX_INFO_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_FONT_SIZE;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}

		part {
			name: "object.text.info.1.multiline";
			scale: 1;
			type: TEXTBLOCK;
			multiline: 1;
			description {
				state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					to: "rect.text.info.1.multiline";
				}
				rel2 {
					to: "rect.text.info.1.multiline";
				}
				text {
						style: "notibox_info";
						align: 0.0 0.0;
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				text {
					style: "notibox_info_effect";
				}
				visible:1;
			}
		}

		part {
			name: "object.text.info.2";
			scale: 1;
			type: TEXT;
			effect: TEXT_EFFECT;
			description {
				state: "default" 0.0;
				rel1 {to: "rect.text.info.2";}
				rel2 {to: "rect.text.info.2";}
				color: NOTIBOX_INFO_FONT_COLOR;
				text {
					font: NOTIBOX_INFO_FONT;
					text_class: TEXT_CLASS_TIZEN;
					size: NOTIBOX_INFO_FONT_SIZE;
					align: 0.0 0.5;
#ifdef DEBUG_TEXT
					text: "some string of text to display";
#endif
				}
				visible:0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "show.effect" 0.0;
				inherit: "default" 0.0;
				color2: NOTIBOX_FONT_SHADOW_COLOR;
				color3: NOTIBOX_FONT_OUTLINE_COLOR;
				visible:1;
			}
		}

		part {
			name: "object.layer.touch.background";
			mouse_events: 1;
			repeat_events: 1;
			scale: 1;
			type: RECT;
			description {
				state: "default" 0.0;
				rel1 {to: "background";}
				rel2 {to: "background";}
				color: 0 0 0 0;
			}
		}
		QUICKPANEL_FOCUS_OBJECT("focus", "background", "background")
		part {
			name: "object.layer.touch.button.1";
			mouse_events: 1;
			repeat_events: 0;
			scale: 1;
			type: RECT;
			description {
				state: "default" 0.0;
				rel1 {
					to: "rect.icon";
				}
				rel2 {to: "rect.icon";}
				color: 0 0 0 0;
			}
			description {
				state: "show" 0.0;
				inherit: "default" 0.0;
				visible:1;
			}
			description {
				state: "hide" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
	}

	programs {
		program {
			name: "init.layout";
			signal: "load";
			source: "";
			in: 0.0 0.0;
			script{
				init_variables();
			}
		}
		program{
			name: "box.show.dim";
			signal: "box.show.dim";
			source: "box.prog";
			script {
				set_int(g_is_show_dim_bg, 1);
			}
		}
		program{
			name: "box.hide.dim";
			signal: "box.hide.dim";
			source: "box.prog";
			script {
				set_int(g_is_show_dim_bg, 0);
			}
		}
		program{
			name: "box.portrait";
			signal: "box.portrait";
			source: "box.prog";
			action: STATE_SET "portrait" 0.0;
			target: "background";

			target: "rect.thumbnail.list.1.padding";
			target: "rect.thumbnail.list.2.padding";
			target: "rect.thumbnail.list.3.padding";
			target: "rect.thumbnail.list.4.padding";
			target: "rect.thumbnail.list.5";

			target: "object.thumbnail.list.5";
			after: "box.portrait.custom";
		}
		program{
			name: "box.landscape";
			signal: "box.landscape";
			source: "box.prog";
			action: STATE_SET "landscape" 0.0;
			target: "background";

			target: "rect.thumbnail.list.1.padding";
			target: "rect.thumbnail.list.2.padding";
			target: "rect.thumbnail.list.3.padding";
			target: "rect.thumbnail.list.4.padding";
			target: "rect.thumbnail.list.5";
			target: "object.thumbnail.list.5";
			after: "box.landscape.custom";
		}
		program{
			name: "box.portrait.custom";
			source: "box.prog";
			script {
				if (get_int(g_is_show_dim_bg) == 1) {
					set_state(PART:"object.icon.bg.dim", "portrait", 0.0);
				}
			}
		}
		program{
			name: "box.landscape.custom";
			source: "box.prog";
			script {
				if (get_int(g_is_show_dim_bg) == 1) {
					set_state(PART:"object.icon.bg.dim", "landscape", 0.0);
				}
			}
		}
#ifdef TBD
		program{
			name: "box.touch.down";
			signal: "mouse,clicked,1";
			source: "object.layer.touch.background";
			action: SIGNAL_EMIT "selected" "edje";
		}
#endif
		program{
			name: "effect,mouse,down";
			signal: "mouse,down,1";
			source: "object.layer.touch.background";
			script {
				if (get_int(g_is_show_dim_bg) == 1) {
					set_state(PART:"object.touch.effect", "show.dim", 0.0);
				} else {
					set_state(PART:"object.touch.effect", "show", 0.0);
				}
			}
		}
		program{
			name: "effect,mouse,up";
			signal: "mouse,up,1";
			source: "object.layer.touch.background";
			action: STATE_SET "default" 0.0;
			transition: ACCELERATE 0.20;
			target: "object.touch.effect";
		}
		program{
			name: "box.button.1.touch.clicked";
			signal: "mouse,clicked,1";
			source: "object.layer.touch.button.1";
			action: SIGNAL_EMIT "button_1" "edje";
		}
		program{
			name: "box.button.1.touch.down";
			signal: "mouse,down,1";
			source: "object.layer.touch.button.1";
			action: STATE_SET "show" 0.0;
			target: "object.icon.press";
		}
		program{
			name: "box.button.1.touch.up";
			signal: "mouse,up,1";
			source: "object.layer.touch.button.1";
			action: STATE_SET "hide" 0.0;
			target: "object.icon.press";
		}
		program{
			name: "box.show.icon.bg";
			signal: "box.show.icon.bg";
			source: "box.prog";
			action: STATE_SET "show" 0.0;

			target: "object.layer.touch.button.1";
		}
		program{
			name: "box.hide.icon.bg";
			signal: "box.hide.icon.bg";
	 		source: "box.prog";
			action: STATE_SET "hide" 0.0;

			target: "object.layer.touch.button.1";
		}
		program{
			name: "box.title.with.icon";
			signal: "box.title.with.icon";
			source: "box.prog";
			action: STATE_SET "default" 0.0;
			target: "rect.text.title";
		}
		program{
			name: "box.title.without.icon";
			signal: "box.title.without.icon";
			source: "box.prog";
			action: STATE_SET "without_icon" 0.0;
			target: "rect.text.title";
		}
		MAKE_PART_SHOW_PROGRAM("object.icon.background")
		MAKE_PART_SHOW_PROGRAM("object.icon")
		MAKE_PART_SHOW_PROGRAM("object.icon.sub")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.title")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.contents")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.count")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.1")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.1.multiline")
		MAKE_PART_SHOW_TEXT_PROGRAM("object.text.info.2")
		MAKE_PART_SHOW_PROGRAM("object.thumbnail.list.1")
		MAKE_PART_SHOW_PROGRAM("object.thumbnail.list.2")
		MAKE_PART_SHOW_PROGRAM("object.thumbnail.list.3")
		MAKE_PART_SHOW_PROGRAM("object.thumbnail.list.4")
	}
}