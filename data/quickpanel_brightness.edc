//#define DEBUG
//#define DEBUG_TEXT

	styles {
		style {
			name: "checkbox_text";
			base: "font=Tizen:style=Regular text_class=tizen font_size=26 color=#FFFFFFFF ellipsis=0.0 wrap=mixed";
		}
	}

	group {	name: "quickpanel/brightness_controller/default";

		script {
			public ctnt_shown;
			public time_shown;
		}

		parts {
			part { name: "base";
				type: RECT;
				repeat_events: 1;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 QP_THEME_LIST_ITEM_BRIGHTNESS_HEIGHT;
					max: 9999 QP_THEME_LIST_ITEM_BRIGHTNESS_HEIGHT;
					rel1 {
						relative: 0.0 0.0;
					}
					rel2 {
						relative: 1.0 0.0;
					}
					align: 0.0 0.0;
					color: QP_THEME_BG_COLOR;
					visible: QP_THEME_BG_VISIBILITY;
				}
			}
			part { name: "bg_image";
				mouse_events: 0;
				description {
					state: "default" 0.0;
					rel1.to:"base";
					rel2.to:"base";
					color: QP_THEME_NOTI_BG_COLOR;
				}
				description {
					state: "selected" 0.0;
					inherit: "default" 0.0;
					color: QP_THEME_NOTI_BG_COLOR;
				}
			}
			part { name: "elm.padding.top";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 0 37;
					fixed: 0 1;
					visible: 0;
					rel1.to:"base";
					rel2.to:"base";
					rel2.relative: 1.0 0.0;
					align: 0.0 0.0;
					visible: 0;
				}
			}
			part { name: "elm.padding.left.bg";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 14 0;
					fixed: 1 0;
					rel1.to:"base";
					rel2.to:"base";
					rel2.relative: 0.0 0.0;
					rel2.relative: 0.0 1.0;
					align: 0.0 0.0;
					color: QP_THEME_BG_COLOR;
					visible: QP_THEME_BG_VISIBILITY;
				}
			}
			part { name: "elm.padding.right.bg";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 14 0;
					fixed: 1 0;
					rel1.to:"base";
					rel2.to:"base";
					rel1.relative: 1.0 0.0;
					rel2.relative: 1.0 1.0;
					align: 1.0 0.0;
					color: QP_THEME_BG_COLOR;
					visible: QP_THEME_BG_VISIBILITY;
				}
			}
			part { name: "elm.content.bg";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 14 0;
					fixed: 1 0;
					rel1 {
						to_x:"elm.padding.left.bg";
						to_y:"base";
						relative: 1.0 0.0;
					}
					rel2 {
						to_x:"elm.padding.right.bg";
						to_y:"base";
						relative: 0.0 1.0;
					}
					align: 0.0 0.0;
					visible: 1;
					color: QP_THEME_NOTI_BG_COLOR;
				}
			}
			part { name: "elm.padding.left";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 28 0;
					fixed: 1 0;
					rel1.to:"base";
					rel2.to:"base";
					rel2.relative: 0.0 0.0;
					rel2.relative: 0.0 1.0;
					align: 0.0 0.0;
					visible: 0;
				}
			}
			part { name: "elm.padding.right";
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					min: 28 0;
					fixed: 1 0;
					rel1.to:"base";
					rel2.to:"base";
					rel1.relative: 1.0 0.0;
					rel2.relative: 1.0 1.0;
					align: 1.0 0.0;
					visible: 0;
				}
			}
			part { name: "elm.padding.bottom.check.text";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 39;
					fixed: 0 1;
					rel1.to:"base";
					rel2.to:"base";
					rel1.relative: 0.0 1.0;
					rel2.relative: 1.0 1.0;
					align: 0.0 1.0;
					visible: 0;
				}
			}
			part { name: "elm.padding.bottom";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 39;
					fixed: 0 1;
					rel1.to:"base";
					rel2.to:"base";
					rel1.relative: 0.0 1.0;
					rel2.relative: 1.0 1.0;
					align: 0.0 1.0;
					color: QP_THEME_BG_COLOR;
					visible: QP_THEME_BG_VISIBILITY;
				}
			}
			part { name: "elm.rect.thumbnail";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 52 52;
					fixed: 1 1;
					rel1 {
						to_x:"elm.padding.left";
						to_y:"elm.padding.top";
						relative: 1.0 1.0;
					}
					rel2 {
						to_x:"elm.padding.left";
						to_y:"elm.padding.top";
						relative: 1.0 1.0;
					}
					align: 0.0 0.0;
					visible:0;
				}
			}
			part { name: "elm.swallow.thumbnail";
				type: SWALLOW;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					rel1 {
						to: "elm.rect.thumbnail";
					}
					rel2 {
						to: "elm.rect.thumbnail";
					}
				}
			}
			part { name: "elm.padding.thumbnail.x";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 6 0;
					fixed: 1 0;
					rel1 {
						to:"elm.rect.thumbnail";
						relative: 1.0 0.0;
					}
					rel2 {
						to:"elm.rect.thumbnail";
						relative: 1.0 1.0;
					}
					align: 0.0 0.0;
					visible: 0;
				}
			}
			part { name: "elm.rect.slider";
				type: RECT;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					min: 0 20;
					fixed: 0 1;
					rel1 {
						relative: 1.0 0.0;
						to_x: "elm.padding.thumbnail.x";
						to_y: "elm.rect.thumbnail";
					}
					rel2 {
						relative: 0.0 1.0;
						to_x: "elm.slider.padding.x";
						to_y: "elm.rect.thumbnail";
					}
					align: 0.0 0.5;
					visible:0;
				}
			}
			part { name: "elm.swallow.slider";
				type: SWALLOW;
				mouse_events: 1;
				scale: 1;
				description {
					state: "default" 0.0;
					fixed: 1 1;
					rel1 {
						to: "elm.rect.slider";
					}
					rel2 {
						to: "elm.rect.slider";
					}
				}
			}
			part { name: "elm.slider.padding.x";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 22 0;
					fixed: 1 0;
					rel1 {
						relative: 0.0 0.0;
						to: "elm.check.rect";
					}
					rel2 {
						relative: 0.0 1.0;
						to: "elm.check.rect";
					}
					align: 1.0 0.0;
					visible: 0;
				}
			}
			part { name: "elm.check.rect";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 48 48;
					fixed: 1 1;
					rel1 {
						relative: 0.0 0.0;
						to_x: "elm.check.text.padding.x";
						to_y: "elm.padding.bottom.check.text";
					}
					rel2 {
						relative: 0.0 0.0;
						to_x: "elm.check.text.padding.x";
						to_y: "elm.padding.bottom.check.text";
					}
					align: 1.0 1.0;
					visible: 0;
				}
			}
			part { name: "elm.check.swallow";
				type: SWALLOW;
				mouse_events: 1;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					rel1 {
						to: "elm.check.rect";
					}
					rel2 {
						to: "elm.check.rect";
					}
				}
			}
			part { name: "elm.check.text.padding.x";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					min: 8 0;
					fixed: 1 0;
					rel1 {
						relative: 0.0 0.0;
						to_x: "elm.check.text.rect";
					}
					rel2 {
						relative: 0.0 1.0;
						to_x: "elm.check.text.rect";
					}
					align: 1.0 0.0;
					visible:0;
				}
			}
			part { name: "elm.check.text.rect";
				type: RECT;
				scale: 1;
				description { state: "default" 0.0;
					fixed: 1 1;
					min: 90 96;
					max: 90 96;
					rel1 {
						relative: 0.0 0.5;
						to_x:"elm.padding.right.bg";
						to_y:"elm.check.rect";
					}
					rel2 {
						relative: 0.0 0.5;
						to_x:"elm.padding.right.bg";
						to_y:"elm.check.rect";
					}
					align: 1.0 0.5;
					visible:0;
				}
			}
			part { name: "elm.check.text";
				type: TEXTBLOCK;
				multiline: 1;
				mouse_events: 0;
				scale: 1;
				description { state: "default" 0.0;
					rel1 {
						to: "elm.check.text.rect";
					}
					rel2 {
						to: "elm.check.text.rect";
					}
					text {
						style: "checkbox_text";
						align: 0.0 0.5;
					}
				}
			}
		}

		programs {
			program { name: "show_content";
				signal: "elm,state,elm.swallow.slider,active";
				source: "elm";
				script {
					set_state(PART:"elm.swallow.slider", "show", 0.0);
					set_int(ctnt_shown, 1);
				}
			}
			program { name: "go_active";
				signal: "elm,state,selected";
				source: "elm";
				script {
					set_state(PART:"bg_image", "selected", 0.0);
					set_state(PART:"elm.check.text", "selected", 0.0);
					if (get_int(ctnt_shown) == 1)
					set_state(PART:"elm.swallow.slider", "selected", 0.0);
				}
			}
			program { name: "go_passive";
				signal: "elm,state,unselected";
				source: "elm";
				script {
					set_state(PART:"bg_image", "default", 0.0);
					set_state(PART:"elm.check.text", "default", 0.0);
					if (get_int(ctnt_shown) == 1)
					set_state(PART:"elm.swallow.slider", "show", 0.0);
				}
			}
		}
	}